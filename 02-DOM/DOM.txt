1- How we can access HTML elements using DOM in javascript?

Answer:
    There are some most use and popular methods to access HTML elements using DOM in javascript:
        1-getElementById: Retrieves an element by its unique ID attribute.
        2-getElementsByClassName: Retrieves a collection of elements that have a specific class name.
        3-getElementsByTagName: Retrieves a collection of elements with a specific tag name.
        4-querySelector: Retrieves the first element that matches a specific CSS selector.
        5-querySelectorAll: Retrieves a list of all elements that match a specific CSS selector.

------------------------------------------------------------------------------------------------------------

2- What are the activities that we can perform using DOM?

Answer:
    Using DOM, we can perform various type of tasks such as adding or removing something, rearranging, updating, and hiding the data.
    There are some key points to performing the activities.

        1- Accessing and Manipulating Elements:
            Retrieving elements by their ID, class name, tag name, or CSS selector.
            Modifying element properties, such as changing text content, modifying attributes, or updating styles.
            Adding or removing CSS classes to change the element's appearance.
            Creating new elements dynamically and appending them to the DOM.

        2- Modifying Document Structure:
            Adding, removing, or reordering elements within the document.
            Inserting new elements or content at specific positions.
            Cloning or removing existing elements.
            Modifying the parent-child relationships between elements.

        3- Handling Events:
            Attaching event listeners to elements for various user interactions (e.g., clicks, keyboard input, form submissions).
            Responding to events and executing appropriate JavaScript code.

        4- Traversing and Navigating the DOM Tree:
            Moving between parent and child elements.
            Accessing sibling elements.
            Navigating up and down the DOM hierarchy.

        5- Modifying CSS Styles:
            Changing element styles, such as width, height, color, visibility, etc.
            Manipulating CSS classes to apply or remove styling.

        6- Manipulating Form Data:
            Accessing and updating form fields, such as input values, checkboxes, radio buttons, etc.
            Validating form inputs and performing form submission programmatically.

        7- Making AJAX Requests:  // Search later.
            Sending asynchronous HTTP requests to fetch data from a server.
            Updating the DOM with the received data without refreshing the page. 

---------------------------------------------------------------------------------------------------------------

3- What are the event-listeners in DOM?

Answer:
    Event-listeners are those code of blocks which change the properties of specific task on run time. 
    Some most commonly use Event-Listeners are as:

        1- click: Fires when an element is clicked.

            element.addEventListener('click', function(event) {
                 // Code to be executed when the element is clicked
            });

        2- submit: Fires when a form is submitted.

            form.addEventListener('submit', function(event) {
                 // Code to be executed when the form is submitted
                event.preventDefault(); // Prevents the default form submission behavior
            });

        3- keydown, keyup, keypress: Fires when a keyboard key is pressed, released, or pressed and released.

            element.addEventListener('keydown', function(event) {
                // Code to be executed when a key is pressed
            });

        4- mouseover, mouseout: Fires when the mouse pointer enters or leaves an element.

            element.addEventListener('mouseover', function(event) {
                // Code to be executed when the mouse pointer enters the element
            });

            element.addEventListener('mouseout', function(event) {
                // Code to be executed when the mouse pointer leaves the element
            });

        5- change: Fires when the value of an input, select, or textarea element changes.

            input.addEventListener('change', function(event) {
                // Code to be executed when the input value changes
            });

Practical practice will be done in free time.

---------------------------------------------------------------------------------------------------------------